#!/bin/bash

DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi

LIB_HOME=$DIR/../lib/
source $LIB_HOME/helpers.sh

# We are keeping this variable just to preserv the file names
nbackground=0;

check() {
	local base_out=$1
	local outpath=$base_out".check.out"
	local errpath=$base_out".check.err"

	$LIB_HOME/check > $outpath 2> $errpath
}

drop_caches() {
	local base=$1
	local outpath=$base".dropcache.local.out"
	local errpath=$base".dropcache.local.err"

	$LIB_HOME/clearcache $TARGET_MNT > $outpath 2> $errpath
}

background() {
	 $BACKGROUND_PATH > /dev/null 2> /dev/null < /dev/null &
}

killall_background() {
	out_kill=$(killall -9 "background")
	echo "after killing" $out_kill
}

foreground() {
   local workload=$1
   local trace_tool=$2
   local base_out=$3
   local nfg=$4
   local nbg=$5
   local bs=$6

   outpath=$base_out".out"
   errpath=$base_out".err"

   workload_dir=$WORKLOADGEN_BASEDIR/fs-microbench/src
   foreground_cmd="$workload_dir/${workload} $nfg 0 5000 $FOREGROUND_INPUT/big_file $bs debug"

   case "$trace_tool" in
	baseline)
		$foreground_cmd > $outpath 2> $errpath
		;;
	stap)
		stap_out=$base_out".stap"
		stap -g -DSTP_NO_OVERLOAD -DMAXMAPENTRIES=10000 $STAP_SCRIPT_PATH -c "$foreground_cmd > $outpath 2> $errpath" > $stap_out
		;;
	strace)
		strace_out=$base_out".strace"
		strace -f -q -t -ttt -T -e signal=none -e trace=open,read,write,pread64,pwrite64,stat,lseek,close -o $strace_out -f $foreground_cmd > $outpath 2> $errpath
		;;
	bpftrace)
		;;
	perf)
		;;
	ftrace)
		;;
	*)
		echo $"Unknown command: $trace_tool {baseline|stap|strace}"
		exit 1
   esac
}

show_help() {
	echo "Illegal number of parameters. Usage: $0 env workload nforeground nbackground bsize trace_tool"
	echo -n "Usage:  $0 -e | --env ENVIRONMENT"
	echo -n "-w | --workload GUEST_USERNAME "
	echo -n "-bg | --nbackground NUMBER_OF_BACKGROUND_JOBS"
	echo -n "-fg | --nforeground NUMBER_OF_FOREGROUND_JOBS"
	echo -n "-bs | --bsize BLOCK_SIZE"
	echo "-t | --trace_tool TRACE_TOOL"

	echo -e "\t$0 -h | --help"

	echo
	echo "-h  | --help: shows this help"
	echo "-t  | --trace_tool: the trace tool used (baseline | strace | stap)"
}

check_parameters() {
	check_parameter $env "-e  | --env"
	success_or_die
	check_parameter $workload "-w  | --workload"
	success_or_die
	check_parameter $trace_tool "-t  | --trace_tool"
	success_or_die
	check_parameter $nbackground "-bg  | --nbackground"
	success_or_die
	check_parameter $nforeground "-bg  | --nforeround"
	success_or_die
	check_parameter $nforeground "-bs  | --bsize"
	success_or_die
}

define_parameters() {
	while [ ! -z $1 ]; do
		case $1 in
			-e | --env)
				shift;
				env=$1;
				;;
			-w | --workload)
				shift;
				workload=$1;
				;;
			-t | --trace_tool)
				shift;
				trace_tool=$1;
				;;
			-bg | --nbackground)
				shift;
				nbackground=$1;
				;;
			-fg | --nforeground)
				shift;
				nforeground=$1;
				;;
			-bs | --bsize)
				shift;
				bsize=$1;
				;;
			-h | --help | *)
				show_help;
				exit 0;
				;;
		esac
		shift
	done
	check_parameters
	success_or_die
}

execute() {

	#load experiment variables
	source $env
	mkdir -p $OUT_BASEDIR;

	local baseout=$OUT_BASEDIR/$RANDOM.$workload.$nforeground.$nbackground.$bsize".load";

	drop_caches $baseout;
	check $baseout;

	for i in `seq $nbackground`
	do
		echo "starting background", $1
		background
	done

	echo "start load"
	sleep 5
	foreground $workload $trace_tool $baseout $nforeground $nbackground $bsize;

	sleep 5
	echo "kill background"
	killall_background
	echo "kill done"
}

main() {
	define_parameters $@
	success_or_die;

	execute;
}

main $@;
